# -*- coding: utf-8 -*-
"""finetune_llama2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XEDbAdIFaU59meT9AmRzejyld1Pvx1uT
"""

from google.colab import drive
drive.mount('/content/drive')

!pip install -q bitsandbytes

!pip install -q dotenv

!pip install -q trl

#pip freeze > requirements.txt

env_path = '/content/drive/MyDrive/Colab_Notebooks'

import os
from dotenv import load_dotenv

env_path = os.path.join(env_path, ".env")

load_dotenv(env_path)

# Access your keys
hf_token = os.getenv("HF_TOKEN")

import torch
from datasets import load_dataset
from transformers import (AutoModelForCausalLM, AutoTokenizer, BitsAndBytesConfig, TrainingArguments, HfArgumentParser, pipeline, logging,)
from peft import LoraConfig, PeftModel
from trl import SFTTrainer

from datasets import load_dataset
import os
import json
from pathlib import Path


ds = load_dataset("b-mc2/sql-create-context")
dataset = ds['train'].shuffle(seed=42).select(range(1000))

VOL_MOUNT_PATH = "/content/drive/MyDrive/Colab_Notebooks"

def load_data_sql(element):

    newitem = {
        "input": element["question"],
        "context": element["context"],
        "output": element["answer"],
    }
    prompt = f"""You are a powerful text-to-SQL model. Your job is to answer questions about a database. You are given a question and context regarding one or more tables.

        You must output the SQL query that answers the question.

        ### Input:
            {newitem['input']}

        ### Context:
            {newitem['context']}

        ### Response:
            {newitem['output']}"""
    #f.write(json.dumps(prompt) + "\n")
    return {"text": prompt}

transformed_dataset = dataset.map(load_data_sql)

transformed_text = transformed_dataset.select_columns(["text"])

transformed_text.push_to_hub("sql-context-llama2-1k-text")

#from google.colab import userdata
#HF_TOKEN = userdata.get('hf-write')

model_name = "openlm-research/open_llama_7b_v2"
dataset_name = "kundan05/sql-context-llama2-1k-text"
new_model = "Llama-2-7b-sql-chat-finetuned-1k"

################################################################################
# QLoRA parameters
################################################################################

lora_r = 64
lora_alpha = 16
lora_dropout = 0.1

################################################################################
# bitsandbytes parameters
################################################################################

use_4bit = True
bnb_4bit_compute_dtype = "float16"
bnb_4bit_quant_type = "nf4"
use_nested_quant = False

################################################################################
# TrainingArguments parameters
################################################################################

output_dir = "./results"
num_train_epochs = 1
fp16 = False
bf16 = True
per_device_train_batch_size = 4
per_device_eval_batch_size = 4
gradient_accumulation_steps = 1
gradient_checkpointing = True
max_grad_norm = 0.3
learning_rate = 2e-4
weight_decay = 0.001
optim = "paged_adamw_32bit"
lr_scheduler_type = "cosine"
max_steps = -1
warmup_ratio = 0.03
group_by_length = True
save_steps = 0
# Log every X updates steps
logging_steps = 25

################################################################################
# SFT parameters
################################################################################

# Load the entire model on the GPU 0
device_map = {"": 0}

# Load dataset (you can process it here)
dataset = load_dataset(dataset_name, split="train")

# Load tokenizer and model with QLoRA configuration
compute_dtype = getattr(torch, bnb_4bit_compute_dtype)

bnb_config = BitsAndBytesConfig(
    load_in_4bit=use_4bit,
    bnb_4bit_quant_type=bnb_4bit_quant_type,
    bnb_4bit_compute_dtype=compute_dtype,
    bnb_4bit_use_double_quant=use_nested_quant,
)

# Check GPU compatibility with bfloat16
if compute_dtype == torch.float16 and use_4bit:
    major, _ = torch.cuda.get_device_capability()
    if major >= 8:
        print("=" * 80)
        print("Your GPU supports bfloat16: accelerate training with bf16=True")
        print("=" * 80)

# Load base model
model = AutoModelForCausalLM.from_pretrained(
    model_name,
    quantization_config=bnb_config,
    #load_in_8bit=True,
    #torch_dtype=torch.float16,
    device_map=device_map
    )

model.config.use_cache = False
model.config.pretraining_tp = 1

# Load LLaMA tokenizer
tokenizer = AutoTokenizer.from_pretrained(model_name, trust_remote_code=True)
tokenizer.pad_token = tokenizer.eos_token
tokenizer.padding_side = "right" # Fix weird overflow issue with fp16 training

# Load LoRA configuration
peft_config = LoraConfig(
    lora_alpha=lora_alpha,
    lora_dropout=lora_dropout,
    r=lora_r,
    bias="none",
    task_type="CAUSAL_LM",
)

# Set training parameters
training_arguments = TrainingArguments(
    output_dir=output_dir,
    num_train_epochs=num_train_epochs,
    per_device_train_batch_size=per_device_train_batch_size,
    gradient_accumulation_steps=gradient_accumulation_steps,
    optim=optim,
    save_steps=save_steps,
    logging_steps=logging_steps,
    learning_rate=learning_rate,
    weight_decay=weight_decay,
    fp16=fp16,
    bf16=bf16,
    max_grad_norm=max_grad_norm,
    max_steps=max_steps,
    warmup_ratio=warmup_ratio,
    group_by_length=group_by_length,
    lr_scheduler_type=lr_scheduler_type,
    report_to="tensorboard"
)

# Set supervised fine-tuning parameters
trainer = SFTTrainer(
    model=model,
    train_dataset=dataset,
    peft_config=peft_config,
    args=training_arguments
)

# Train model
trainer.train()

#pip list

trainer.model.save_pretrained(new_model)

# Commented out IPython magic to ensure Python compatibility.
# %load_ext tensorboard
# %tensorboard --logdir results/runs

# Ignore warnings
logging.set_verbosity(logging.CRITICAL)

# Run text generation pipeline with our next model
input= "List the name, born state and age of the heads of departments ordered by age."
context= "CREATE TABLE head (name VARCHAR, born_state VARCHAR, age VARCHAR)"
prompt = f'''You are a powerful text-to-SQL model. Your job is to answer questions about a database. You are given a question and context regarding one or more tables.

You must output the SQL query that answers the question.

### Input:
{input}

### Context:
{context}'''

pipe = pipeline(task="text-generation", model=model, tokenizer=tokenizer, max_length=700)
result = pipe(prompt)
print(result[0]['generated_text'])


################################Saving the model######################################
# Save the model to the Hugging Face Hub
#######################################################################################

# Reload model in FP16 and merge it with LoRA weights
base_model = AutoModelForCausalLM.from_pretrained(
    model_name,
    low_cpu_mem_usage=True,
    return_dict=True,
    torch_dtype=torch.bfloat16,
    device_map=device_map,
)
model = PeftModel.from_pretrained(base_model, new_model)
model = model.merge_and_unload()

# Reload tokenizer to save it
tokenizer = AutoTokenizer.from_pretrained(model_name, trust_remote_code=True)
tokenizer.pad_token = tokenizer.eos_token
tokenizer.padding_side = "right"

model.push_to_hub(f"kundan05/{new_model}", check_pr=True)

tokenizer.push_to_hub(f"kundan05/{new_model}",check_pr=True)

############################Testing the model######################################

###################################################################################

# Reload model in 8-bit and test the output
model_new_name = "kundan05/Llama-2-7b-sql-chat-finetuned-1k"

model_new_sql = AutoModelForCausalLM.from_pretrained(
    model_new_name,
    #quantization_config=bnb_config,
    load_in_8bit=True,
    torch_dtype=torch.bfloat16,
    device_map=device_map
    )

tokenizer_new = AutoTokenizer.from_pretrained(model_new_name, trust_remote_code=True)
tokenizer_new.pad_token = tokenizer.eos_token
tokenizer_new.padding_side = "right"

# Ignore warnings
logging.set_verbosity(logging.CRITICAL)

# Run text generation pipeline with our next model
input= "List the name, born state and age of the heads of departments ordered by age."
context= "CREATE TABLE head (name VARCHAR, born_state VARCHAR, age VARCHAR)"
prompt = f'''You are a powerful text-to-SQL model. Your job is to answer questions about a database. You are given a question and context regarding one or more tables.

You must output the SQL query that answers the question.

### Input:
{input}

### Context:
{context}'''

pipe = pipeline(task="text-generation", model=model_new_sql, tokenizer=tokenizer_new, max_length=700)
result = pipe(prompt)
print(result[0]['generated_text'])

